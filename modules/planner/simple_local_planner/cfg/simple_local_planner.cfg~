#!/usr/bin/env python
# SimpleLocalPlanner configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t
from local_planner_limits import add_generic_localplanner_params

gen = ParameterGenerator()

# This unusual line allows to reuse existing parameter definitions
# that concern all localplanners
add_generic_localplanner_params(gen)

gen.add("holonomic", bool_t, 0, "holonomic or diff robot modle", True)

gen.add("k_trans_x", double_t, 0, "Pk of liner x.", 3.5, 0)
gen.add("k_trans_y", double_t, 0, "Pk of liner y.", 3.5, 0)
gen.add("k_rot", double_t, 0, "Pk of rotation speed.", 2.0, 0)

gen.add("tolerance_trans", double_t, 0, "tolerance of trans", 0.10, 0.0)
gen.add("tolerance_rot", double_t, 0, "tolerance of heading", 0.10, 0.0)
gen.add("tolerance_timeout", double_t, 0, " ", 0.5, 0.0)

gen.add("samples", int_t, 0, " ", 1, 1)
gen.add("steps", int_t, 0, " ", 5, 1)

gen.add("min_vel_lin", double_t, 0, " ", 0.0, 0.0)
gen.add("max_vel_lin", double_t, 0, " ", 0.5, 0.0)

gen.add("min_vel_th", double_t, 0, " ", 0.0, 0.0)
gen.add("max_vel_th", double_t, 0, " ", 0.5, 0.0)

gen.add("min_in_place_vel_th", double_t, 0, " ", 0.2, 0.0)
gen.add("in_place_trans_vel", double_t, 0, " ", 0.0, 0.0)

gen.add("trans_stopped_velocity", double_t, 0, " ", 1e-4, 0.0)
gen.add("rot_stopped_velocity", double_t, 0, " ", 1e-4, 0.0)

exit(gen.generate("simple_local_planner", "simple_local_planner", "SimpleLocalPlanner"))
